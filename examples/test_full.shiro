use '@std/io' as io;
use '@std/os' as os;
use '@std/time' as time;
use '@std/log' as log;
use '../examples/test_lib' as example;
use '../examples/function_nesting' as fnnest;

log.info('Hello, world!');

let start = time.millis();
dbg(log['info']);

let native_result = io.hello_native();
io.println(native_result);

io.println(os.getenv('APPDATA'));

for let i = 0; i < 4; i+=1 {
    example.test();
}

io.println('type is ' + typeof(io));

let str = 'asdf';
io.println('string indexing: ' + str[0]);

let a = 1;
let b = 2;
let c = 2 * a + b;
io.println(c);

let test_fun = fun() {
    a = 4;
    a;
};

fun test_fun_2() {
    ;
}

io.println('----');
b = (c = 64);
io.println(c);
io.println(b);
test_fun();
test_fun_2();

io.println(a, b, c);

for let i = 0; i < 10; i += 1 {
    fun test() {
        io.println(i);
    }

    io.println('For loop Test!', i);
    test();
}

let i = 23;
while (i -= 1) > 0 {
    io.println('While loop test!');
}

let a = 6;

if a == 5 {
    io.println('is 5!'); 
} else if a == 6 {
    io.println('is 6!'); 
} else {
    io.println('not 5!'); 
}

let test_obj = { a = { b = 3 } };

io.println(test_obj);
io.println(test_obj.a.b);
test_obj.a.b += 2;
io.println(test_obj.a['b']);

test_obj.f = 23;
io.println(test_obj.f);
io.println(test_obj.a.c);

let test_arr = ['a', 'b', 'c'];
test_arr[0] = 2;
io.println(test_arr[0]);

let end = time.millis();


let array = ['1', '2'];
append(array, 3);
io.println(array[0], array[1], array[2], array[3]);
io.println('len = ' + len(array));

let io_keys = keys(io);
for let i = 0; i < len(io_keys); i += 1 {
    io.println('found key: ' + io_keys[i]);
}

let str = 'asdfg';
io.println(len(str));

io.println('The code ran to completion in ' + (end - start) + 'ms.');

1.0 + 0.5;