use std::str::FromStr;
use crate::ast::{Expr, Opcode, IfBranch, AssignOpcode, Reference};

grammar;

pub Chunk: Vec<Box<Expr>> = {
    <mut c:Chunk> <e:StmtExpr> => { if &*e != &Expr::Nop { c.push(e); } c },
    StmtExpr => if &*<> != &Expr::Nop { vec![<>] } else { vec![] }
};

StmtExpr: Box<Expr> = {
    <Expr> ";",
    ";" => Box::new(Expr::Nop),
    
    "func" <name:Identifier> "(" <args:ArgsDef> ")" "{" <b:Chunk?> "}" => Box::new(Expr::FunctionDecl(Some(name), args, b.unwrap_or(vec![]))),
    "func" <name:Identifier> "(" ")" "{" <b:Chunk?> "}" => Box::new(Expr::FunctionDecl(Some(name), vec![], b.unwrap_or(vec![]))), 

    "import" <lib:Str> "as" <name:Identifier> ";" => Box::new(Expr::Import(lib, name)),

    "while" <e:Expr> "{" <c:Chunk?> "}" => Box::new(Expr::While(e, c.unwrap_or(vec![]))),
    "for" <i:Expr> ";" <c:Expr> ";" <a:Expr> "{" <b:Chunk?> "}" => Box::new(Expr::For(i, c, a, b.unwrap_or(vec![]))),

    "return" <retval:Expr> ";" => Box::new(Expr::Return(retval)),

    IfBranches => Box::new(Expr::If(<>)),
    
};

// Expressions
Expr: Box<Expr> = {
    "func" "(" <args:ArgsDef> ")" "{" <b:Chunk?> "}" => Box::new(Expr::FunctionDecl(None, args, b.unwrap_or(vec![]))),
    "func" "(" ")" "{" <b:Chunk?> "}" => Box::new(Expr::FunctionDecl(None, vec![], b.unwrap_or(vec![]))),
    
    "let" <name:Identifier> "=" <val:Expr> => Box::new(Expr::Let(name, val)),

    AssignmentExpr
}

Reference: Reference = {
    <r:IdentifierChain> => Reference::Regular(r),
    <r:IdentifierChain> "[" <idx:Expr> "]" => Reference::Indexed(r, idx)
}

IfBranches: Vec<Box<IfBranch>> = {
    "if" <e:IfBlock> => vec![e],
    <mut v:IfBranches> "else if" <e:IfBlock> => { v.push(e); v },
    <mut v:IfBranches> "else" "{" <b:Chunk?> "}" => { v.push(Box::new(IfBranch{ condition: None, body: b.unwrap_or(vec![]) })); v },
}

IfBlock: Box<IfBranch> = {
    <c:Expr> "{" <b:Chunk?> "}" => Box::new(IfBranch{ condition:Some(c), body: b.unwrap_or(vec![]) }),
}

// Operations
AssignmentExpr: Box<Expr> = {
    Reference AssignmentOp BoolExpr => Box::new(Expr::AssignOp(<>)),
    BoolExpr
}

AssignmentOp: AssignOpcode = {
    "+=" => AssignOpcode::Add,
    "-=" => AssignOpcode::Sub,
    "*=" => AssignOpcode::Mul,
    "/=" => AssignOpcode::Div,
    "%=" => AssignOpcode::Mod,
    "=" => AssignOpcode::Eq,
};

BoolExpr: Box<Expr> = {
    BoolExpr BoolOp CmpExpr => Box::new(Expr::BinaryOp(<>)),
    CmpExpr
}

BoolOp: Opcode = {
    "&&" => Opcode::BAnd,
    "||" => Opcode::BOr,
};

CmpExpr: Box<Expr> = {
    CmpExpr CmpOp Sum => Box::new(Expr::BinaryOp(<>)),
    Sum
}

CmpOp: Opcode = {
    "!=" => Opcode::Neq,
    "==" => Opcode::Eq,
    ">" => Opcode::Gt,
    ">=" => Opcode::Gte,
    "<" => Opcode::Lt,
    "<=" => Opcode::Lte,
};

Sum: Box<Expr> = {
    Sum SumOp Factor => Box::new(Expr::BinaryOp(<>)),
    Factor,
};

SumOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::BinaryOp(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Mod,
};

Term: Box<Expr> = {
    "null" => Box::new(Expr::Null),
    Integer => Box::new(Expr::Integer(<>)),
    Decimal => Box::new(Expr::Decimal(<>)),
    Str => Box::new(Expr::String(<>)),
    Boolean => Box::new(Expr::Boolean(<>)),
    IdentifierChain => Box::new(Expr::Reference(Reference::Regular(<>))),
    <n:IdentifierChain> "(" <args:Args> ")" => Box::new(Expr::Invocation(n, args)),
    <n:IdentifierChain> "(" ")" => Box::new(Expr::Invocation(n, vec![])),
    <r:IdentifierChain> "[" <i:Expr> "]" => Box::new(Expr::Reference(Reference::Indexed(r, i))),
    "(" <Expr> ")",
    "{" "}" =>  Box::new(Expr::ShionObject(vec![])),
    "[" "]" =>  Box::new(Expr::ShionArray(vec![])),
    "{" <o:ShionObject> "}" => Box::new(Expr::ShionObject(o)),
    "[" <a:Args> "]" => Box::new(Expr::ShionArray(a)),
};

// SHION
ShionObject: Vec<Box<Expr>> = {
    <e:ShionDef> => vec![e],
    <mut v:ShionObject> "," <e:ShionDef> => { v.push(e); v },
};

ShionDef: Box<Expr> = {
    <i:Identifier> "=" <e:Expr> => Box::new(Expr::ShionDef(i, e))
};

// Primitives
Args: Vec<Box<Expr>> = {
    <e:Expr> => vec![e],
    <mut v:Args> "," <e:Expr> => { v.push(e); v },
}

ArgsDef: Vec<String> = {
    <mut c:ArgsDef> "," <i:Identifier> => { c.push(i); c },
    <i:Identifier> => vec![i],
}

IdentifierChain: Vec<String> = {
    <mut c:IdentifierChain> "." <i:Identifier> => { c.push(i); c },
    <i:Identifier> => vec![i],
};

Integer: i64 = {
    r"[-]{0,1}[0-9]+" => i64::from_str(<>).unwrap(),
};

Decimal: f64 = {
    r"[-]{0,1}[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap(),
}

Str: String = {
    r"'[^']*'" => <>.trim_matches('\'').to_string()
};

Boolean: bool = {
    "true" => true,
    "false" => false,
};

Identifier: String = {
    r"[A-Za-z_]{1}[A-Za-z0-9_]*" => <>.to_string()
};